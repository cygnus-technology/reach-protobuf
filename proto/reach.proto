
/*
 * Copyright (c) 2023-2024 i3 Product Development
 * 
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Protobuf definition of the Reach protocol

syntax = "proto3";

package cr;

/** C# namespace for generated classes. */
option csharp_namespace = "Cygnus.Reach";

/** Java package for generated classes. */
option java_multiple_files = true;
option java_package = "com.cygnusreach.reachprotocol.proto";

/** Swift options */
option swift_prefix = "";

// ReachProtoVersion is replaced by the MAJOR, MINOR and PATCH, below.
enum ReachProtoVersion {
    NOT_USED         = 0;   // Must have a zero
    CURRENT_VERSION  = 0x102;  // update this when you change this file.
    // 5: device info extended with sizes structure
    // 6: device info entries made redundant by sizes are deleted.
    // 7: Added file erase and time service
    // 10: Skipped up to make incompatible change to BufferSizes
    // 11: Changes to improve the compatibility of v10
    // 12: Renamed "reply" messages as "response" messages.
    // 13: Restored param_info_enum_count
    // 14: Adding WiFi service
    // 15: 32 character challenge key
    // 16: Replaced number_of_objects; with client_id
    // 17: Add description and timeout to CommandInfo
    // 18: Generalize device description len to description len
    // 19: Remove parameter key
    // 20: Added protocol_version_string, deprecated protocol_version.
    // 21: Added separate version numbers for MAJOR, MINOR and PATCH.
    // 0x101:  starting on ahsoka changes
    // 0x102:  merging 676 into ahsoka
    // 0x103:  Reworked FileTransfer start with checksum and preferred ack rate.
    // 0x104:  Added discover notifications.
}

enum ReachProto_MAJOR_Version {
    // MAJOR_V0       = 0;   // Must have a zero
    MAJOR_VERSION  = 0;
}
enum ReachProto_MINOR_Version {
    MINOR_V0       = 0;   // Must have a zero
    MINOR_VERSION  = 1;   // Update at a release
}
enum ReachProto_PATCH_Version {
  PATCH_V0         = 0;   // Must have a zero
  PATCH_VERSION    = 4;   // Update when something changes
}


enum ReachMessageTypes {
  INVALID             = 0;    // No Valid Message
  ERROR_REPORT        = 1;
  PING                = 2;
  GET_DEVICE_INFO     = 3;

  // Parameters
  DISCOVER_PARAMETERS = 5;
  DISCOVER_PARAM_EX   = 6;
  READ_PARAMETERS     = 7;
  WRITE_PARAMETERS    = 8;
  CONFIG_PARAM_NOTIFY = 9;      // setup parameter notification
  PARAMETER_NOTIFICATION = 10;  // A parameter has changed
  DISCOVER_NOTIFICATIONS = 11;  // find out how notifications are setup

  // File Transfers
  DISCOVER_FILES      = 12;
  TRANSFER_INIT       = 13;    // Begins a Transfer
  TRANSFER_DATA       = 14;    // Sends Data
  // Clears Sender (Client / Service) to Send More Data:
  TRANSFER_DATA_NOTIFICATION = 15;

  DISCOVER_COMMANDS   = 17;
  SEND_COMMAND        = 18;

  // Command Line Interface
  CLI_NOTIFICATION    = 20;

  // Streams
  DISCOVER_STREAMS    = 25;
  OPEN_STREAM         = 26;
  CLOSE_STREAM        = 27;
  STREAM_DATA_NOTIFICATION = 28;

  // Time
  SET_TIME             = 30;
  GET_TIME             = 31;

  // WiFi
  DISCOVER_WIFI        = 40;
  WIFI_CONNECT         = 41;
}

//----------------------------
// Service Routing Message Header
//----------------------------
message ReachMessageHeader {
  // This ID defines the Type of Message being carried in the Envelope / Header
  uint32 message_type         = 1;

  // Routing for endpoints other than zero.
  uint32 endpoint_id          = 2;

  // To support multiple clients
  uint32   client_id  = 3;

  // Zero when transaction is complete
  uint32   remaining_objects  = 4;

  // An ID for a series of messages
  uint32 transaction_id       = 5;
}

message ReachMessage {
  ReachMessageHeader header = 1;
  bytes payload = 2;
}

//----------------------------
// This Service Routing Message Header is used in the OpenPV system.
// Reach can speak it.
// This object represents the Layer 2 Message Format for OpenPV Service Messages.
//----------------------------
message AhsokaMessageHeader
{
    // This ID defines the Type of Message being carried in the Envelope / Header
    int32 transport_id = 1;

    // This ID defines a unique Message / Response used when out of order messages are needed
    int32 client_message_id = 2;

    // Unique ID for a Client used in Services that support Multiple Clients 
    // OpenPV would use a GUID but Reach uses a 4 byte integer
    bytes client_id = 3;

    // The size of the message payload (in packets) that follows this header
    int32 message_size = 4;

    // Routing for Non-Endpoint Style Transports. 
    // Note: Endpoint 0 is Reserved for Service Discovery for Non-Endpoint Transports
    uint32 endpoint_id = 5;

    // (Not supported) Indicates that the message has used deflate compression in addition to pbuff encoding
    bool is_message_compressed = 6;
}

// ERROR_REPORT: Could be sent asynchronously to indicate an error.
message ErrorReport {
  int32  result            = 1;    // Error Result
  string result_message    = 2;    // Error String
}

// Request Object used to Echo Data for testing the Device Communication
message PingRequest {
  bytes echo_data         = 1;    // d : Data
}

// Response Object used to Echo Data for testing the Device Communication
message PingResponse {
  bytes echo_data         = 1;   // d : Data
  int32 signal_strength   = 2;   // rssi : Rssi express in strength so clients don't have to interpret
}

// ------------------------------------------------------
// Required Device Information Service
// Reach sessions are opened with the device info request and response.  
// ------------------------------------------------------
message DeviceInfoRequest {
  // The request can include a challenge key to grant or deny access to parts of the system.
  optional string challenge_key  = 1;
  // The client shares its version to enable backward compatibility.
  string client_protocol_version = 2;
}

message DeviceInfoResponse {
  int32  protocol_version         = 1;    // Supported Protocol Version (deprecated)
  string device_name              = 2;    // Name, Typically Model Name
  string manufacturer             = 3;
  string device_description       = 4;    // Description

  // Each endpoint advertises a "main" FW version.
  // If there are other FW versions, put them in the parameter repo.
  string firmware_version         = 6;

  // protocol version as a string
  string protocol_version_string  = 7;

  // A bit mask, allowing support for up to 32 services
  uint32 services                 = 8;

  // Used to avoid reloading the parameter descriptions
  uint32 parameter_metadata_hash  = 9;

  optional bytes application_identifier = 10;   // A UUID to find a Custom firmware_version
  uint32 endpoints                      = 11;   // bit mask, non-zero if other endpoints.

  bytes sizes_struct = 20;  // packed. See SizesOffsets
}

// binary bit masks or'ed together into the DeviceInfoResponse.services
enum ServiceIds {
  NO_SVC_ID       = 0;
  PARAMETER_REPO  = 1;
  FILES           = 2;
  STREAMS         = 4;
  COMMANDS        = 8;
  CLI             = 16;
  TIME            = 32;
  WIFI            = 64;
}

// binary bit masks or'ed together into the DeviceInfoResponse.endpoints
enum EndpointIds { 
  NO_ENDPOINTS    = 0;
  ONE             = 1;
  TWO             = 2;
  THREE           = 4;
  FOUR            = 8;
}

// ------------------------------------------------------
// Parameter Service
// Parameters provide a simple key:value database. The key is an ID number.  
// The value can be of various common types up to (typically) 32 bytes.  
// Parameterssupport a robust description which can be const, stored in flash.  
// Parameters can be configured to support notifying the client.
// ------------------------------------------------------
message ParameterInfoRequest {
  repeated uint32 parameter_ids = 2; // ID's to Fetch (Empty to Get All)
}

message ParameterInfoResponse {
  repeated ParameterInfo parameter_infos = 1; // Array of Param Infos
}

message ParameterInfo {
  uint32 id                         = 1;  // Id
  ParameterDataType data_type       = 2;  // DataType
  uint32 size_in_bytes              = 3;  // used by some devices
  string name                       = 4;  // Name
  AccessLevel access                = 5;  // Access
  optional string description       = 6;  // Description
  string units                      = 7;  // Units
  optional double range_min         = 8;  // Range Max
  optional double range_max         = 9;  // Range Max
  optional double default_value     = 10; // Show instead of value if no value.
  StorageLocation storage_location  = 11; // RAM or NVM or ?
}

// Give names to enums and bitfields
message ParamExKey {
    uint32 id               = 1;  // the valud of the enum
    string name             = 2;  // the name of the enum
}

// also used for bitfields
message ParamExInfoResponse {
    uint32              associated_pid = 1;
    ParameterDataType   data_type      = 2;
    repeated ParamExKey enumerations   = 3;
}
 

// ------------------------------------------------------
// Parameter Reads
// ------------------------------------------------------
message ParameterRead {
  repeated uint32 parameter_ids = 2;        // i: ID -  Leave Empty to Retrieve All
  uint32 read_after_timestamp   = 3;        // Allows for retrieval of only new / changed values.
}

message ParameterReadResponse {
  // The read_timestamp indicates when this param was last read.  
  // Reading resets this value to now.
  // 
  uint32 read_timestamp           = 1;      // Returns timestamp of last read...useful for
                                            // polling large variable lists.
  repeated ParameterValue values  = 3;      // Array of Result Values
}

// ------------------------------------------------------
// Parameter Writes
// ------------------------------------------------------
message ParameterWrite {
  repeated ParameterValue values  = 3;      // Array of Write Values
}

message ParameterWriteResponse {
  int32 result                    = 1;      // 0 if OK
  optional string result_message  = 2;      // Error String
}

// ------------------------------------------------------
// Parameter Notification configuration
// Notification can be enabled or disabled
// ------------------------------------------------------
message ParameterNotifyConfig {
  uint32 parameter_id                = 1;    // Which param
  bool   enabled                     = 2;    // Enabled or Disabled
  uint32 minimum_notification_period = 3;    // min_ms: Minimum Notification Interval (ms)
  uint32 maximum_notification_period = 4;    // max_ms: Minimum Notification Interval (ms)
  float  minimum_delta               = 5;    // notify only if change by this much
}

message ParameterNotifyConfigResponse {
  int32  result                      = 1; // zero if all OK
  optional string result_message  = 2;      // Error String
}

// ------------------------------------------------------
// The client can discover how notifications are setup.
// ------------------------------------------------------
message ParameterNotifySetupRequest {
  repeated uint32 parameter_ids = 1;        // i: ID -  Leave Empty to Retrieve All
}

message ParameterNotifySetupResponse {
  repeated ParameterNotifyConfig configs = 1;
}

// when parameters change
message ParameterNotification {
  repeated ParameterValue values     = 2;    // Array of Result Values
}

enum ParameterDataType {
  UINT32                  = 0;
  INT32                   = 1;
  FLOAT32                 = 2;
  UINT64                  = 3;
  INT64                   = 4;
  FLOAT64                 = 5;
  BOOL                    = 6;
  STRING                  = 7;  // ASCII or UTF-8. Null Terminated.
  ENUMERATION             = 8;
  BIT_FIELD               = 9;
  BYTE_ARRAY              = 10;
}

// --------------------------------------------------------
// Message for Sending / Receiving a Single Parameter Value
// Uses OnOf (Union) for Values
// --------------------------------------------------------
message ParameterValue {
  uint32 parameter_id       = 1;  // i: ID
  uint32 timestamp          = 2;  // ts: Time Stamp for Notification
  oneof value                     // v: Typed Values Union
  {                         
    uint32 uint32_value     = 3;  // Uint
    sint32 sint32_value     = 4;  // Signed Int
    float  float32_value    = 5;  // Float
    uint64 uint64_value     = 6;  // Uint64
    sint64 sint64_value     = 7;  // Signed Int 64
    double float64_value    = 8;  // double
    bool   bool_value       = 9;  // Bool
    string string_value     = 10; // String values (UTF8)
    uint32 enum_value       = 11;
    uint32 bitfield_value   = 12;
    bytes  bytes_value      = 13; // byte array values
  }                               
}

// ------------------------------------------------------
// (optional) File Service
// The file service provides a method of efficiently transfering large blocks of data over BLE.
// ------------------------------------------------------
message DiscoverFiles { }

message DiscoverFilesResponse {
  repeated FileInfo file_infos = 1; // Array of File Infos
}

message FileInfo {
  uint32 file_id                      = 1;  // ID
  string file_name                    = 2;  // Name
  AccessLevel access                  = 3;  // Access Level (Read / Write)
  int32 current_size_bytes            = 4;  // size in bytes
  StorageLocation storage_location    = 5; 
  bool require_checksum               = 6;  // set true to request checksum generation and validation.
}

// ------------------------------------------------------
// Begins a File Transfer (Upload / Download)
// ------------------------------------------------------
message FileTransferRequest {
  uint32 file_id                      = 1;  // File ID
  uint32 read_write                   = 2;  // 0 for read, 1 for write.
  uint32 request_offset               = 3;  // where to access in the file
  uint32 transfer_length              = 4;  // bytes to read or write
  uint32 transfer_id                  = 5;  // In case of multiple transfers
  uint32 messages_per_ack             = 6;  // obsolete.  Use requested_ack_rate.
  uint32 timeout_in_ms                = 7;  // ms before abandonment
  optional uint32 requested_ack_rate  = 8;  // number of messages before ACK.
  bool   require_checksum             = 9;  // set true to enable checksum generation and validation.
}                                           

message FileTransferResponse {          
  int32  result                       = 1;  // 0 if OK
  uint32 transfer_id                  = 2;  // Transfer ID
  uint32 ack_rate                     = 3;  // confirms or overrides request
  optional string result_message      = 4;  
}                                           

// Bi-Directional Message                   
message FileTransferData {                  
  int32  result                       = 1;  // non-zero for error
  uint32 transfer_id                  = 2;  // Transfer ID
  uint32 message_number               = 3;  // counts up
  bytes  message_data                 = 4;  // Data
  optional int32 checksum             = 5;  // Optional RFC 1071 checksum for integrity checking
}                                           

message FileTransferDataNotification {      
  int32  result                       = 1;  // 0 for success
  optional string result_message      = 2;  
  bool   is_complete                  = 3;  
  uint32 transfer_id                  = 4;  // Transfer ID
  uint32 retry_offset                 = 5;  // file offset where error occurred
}

message FileEraseRequest {
  uint32 file_id                      = 1;  // File ID
}                                           
message FileEraseResponse {                 
  uint32 file_id                      = 1;  // File ID
  int32  result                       = 2;  // err~
  optional string result_message      = 3;
}

// ------------------------------------------------------
// Discover Streams
// ------------------------------------------------------
message DiscoverStreams {}

message DiscoverStreamsResponse { 
  repeated StreamInfo streams = 1; 
}

message StreamInfo {
  int32 stream_id             = 1;
  AccessLevel access          = 2;    // Access Level for Stream  Read / Write.
  string name                 = 3;    // Name of Stream / CLI.
  int32 max_bytes_per_message = 4;    // Max Size of Messages.
}

message StreamOpen {
  int32 stream_id             = 1;    // Stream ID
  AccessLevel access          = 2;    // Read or Write.
}

message StreamOpenResponse {
    int32 stream_id           = 1;    // Stream ID
    int32 result              = 2;    // Carries Success / Result
    optional string result_message = 3;
}

message StreamClose {
    int32 stream_id           = 1;    // Stream ID
}

// Bi-Directional STREAM_DATA_NOTIFICATION Message
message StreamData {
  int32 stream_id             = 1;    // Stream ID
  uint32 roll_count           = 2;    // Message Number (Roll Count)
  bytes message_data          = 3;    // Data
  int32 checksum              = 4;    // Optional for integrity checking
}

// ------------------------------------------------------
// (optional) Command Service
// Allows actions to be triggered from the Reach UI.
// ------------------------------------------------------
message DiscoverCommands {}

message DiscoverCommandsResponse {
  repeated CommandInfo available_commands = 1; // Array of v:n    Values : Names
}

message CommandInfo {
  uint32 id                   = 1;
  string name                 = 2;    // Descriptive name
  optional string description = 3;    // Optional description of the command
  optional uint32 timeout     = 4;    // Optional command timeout
}

// ------------------------------------------------------
// Send Command
// ------------------------------------------------------
message SendCommand { uint32 command_id = 1; }

message SendCommandResponse {
  int32 result                   = 1; // Carries Success / Result
  optional string result_message = 2;
}

// ------------------------------------------------------
// Optional Command Line Interface (CLI) service
// ------------------------------------------------------

// Bi-Directional CLI_DATA Message
message CLIData {
  string message_data = 1;    // Data
}

// ------------------------------------------------------
// Optional Time Service
// The time service is designed to allow the client to 
// set and adjust the real time clock in a server device.
// The time is best specified as UTC plus timezone offset.
// Although the timezone is optional, it's best to use it.
// ------------------------------------------------------
message TimeSetRequest {
  int64   seconds_utc       = 1;  // linux epoch
  optional int32  timezone  = 2;  // seconds adjustment
}

message TimeSetResponse {
  int32 result                   = 1; // Carries Success / Result
  optional string result_message = 2;
}

message TimeGetRequest {}

message TimeGetResponse {
  int32 result                   = 1;  // Carries Success / Result
  optional string result_message = 2;
  int64   seconds_utc            = 3;  // linux epoch       
  optional int32  timezone       = 4;  // seconds adjustment
}

// ------------------------------------------------------
// WiFi Service
// The WiFi service is intended to simplify the 
// repetitive task of communicating WiFi credentials 
// to the device.
// ------------------------------------------------------
message ConnectionDescription {
  string ssid                       = 1;  
  optional int32  signal_strength   = 2;  // dB, RSSI
  optional WiFiSecurity sec         = 3;  
  optional WiFiBand band            = 4;
}

message DiscoverWiFiRequest {
  WiFiState state                   = 2;  // get the current connection, scanned SSID's
}

message DiscoverWiFiResponse {
  int32 result                      = 1;  // 0 for success
  optional string result_message    = 2;
  int32 available_AP                = 3;
  WiFiState state                   = 4;
  uint32 connectionId               = 5;  // connected is 0, others increment.
  optional ConnectionDescription cd = 6;
}

message WiFiConnectionRequest {
    WiFiState action                  = 1;  // connect or disconnect
    optional string password          = 2;  // required to connect
    optional ConnectionDescription cd = 3;  // required to connect
    optional bool autoconnect         = 4;  // required to connect
}

message WiFiConnectionResponse {
  int32 result                      = 1;  // 0 for success
  optional int32 signal_strength    = 2;  // RSSI
  optional string result_message    = 3;  // describes any error
}

// ------------------------------------------------------
// Service Independent
// ------------------------------------------------------

enum CLIType {
  NO_CLI  = 0;
  COMMAND = 1;
  REPORT  = 2;
}

enum AccessLevel {
  NO_ACCESS               = 0;
  READ                    = 1;
  WRITE                   = 2;
  READ_WRITE              = 3;
}

enum StorageLocation {
  STORAGE_LOCATION_INVALID  = 0;
  RAM                       = 1;
  NONVOLATILE               = 2;
  RAM_EXTENDED              = 3;
  NONVOLATILE_EXTENDED      = 4;
}

enum WiFiSecurity {
  OPEN = 0;     // No security
  WEP  = 1;     // WEP
  WPA  = 2;     // WPA
  WPA2 = 3;     // WPA2
  WPA3 = 4;     // WPA3
}

enum WiFiBand {
  NO_BAND = 0;  // Not specified
  BAND_2  = 2;  // 2.4GHz
  BAND_5  = 5;  // 5GHz
}

enum WiFiState {
  NOT_CONNECTED = 0;  // connected, active
  CONNECTED     = 1;  // disconnected
}

enum ErrorCodes {
    NO_ERROR           = 0;
    NO_DATA            = 1;  // 
    READ_FAILED        = 2;  //
    WRITE_FAILED       = 3;  //
    NOT_IMPLEMENTED    = 4;  // returned by weak implementations
    MALFORMED_MESSAGE  = 5;  // not yet used
    NO_SERVICE         = 6;  // not yet used
    PERMISSION_DENIED  = 7;  //
    BUFFER_TOO_SMALL   = 8;  //
    INVALID_PARAMETER  = 9;  //
    CHECKSUM_MISMATCH  = 10; // not yet used
    DECODING_FAILED    = 11; //
    ENCODING_FAILED    = 12; //
    INVALID_STATE      = 13; //
    NO_RESPONSE        = 14; // handler signals no response is necessary
    BAD_FILE           = 15; // bad file ID
    PACKET_COUNT_ERR   = 16;
    CHALLENGE_FAILED   = 17;
    PARAMETER_LOCKED   = 18;
    NO_RESOURCE        = 19; // as in no more param notification slots.
    ABORT              = 1000; // Operation cancellation
}

enum FileTransferState {
    FILE_TRANSFER_INVALID = 0;
    IDLE                  = 1;
    INIT                  = 2;
    DATA                  = 3;
    COMPLETE              = 4;
}

//
// This data describing the sizes of the structures used in C code is 
// communicated in a packed format in the device info structure.  
// Here it's defined in an unpacked (all 32 bit) format.  Use the offsets 
// defined below (SizesOffsets) to unpack into this structure.
// The file "reach_ble_proto_sizes.h" and the function 
// populate_device_info_sizes() are good places to look for further info.
//
// This structure is updated at proto version 10.  Update earlier code.
message BufferSizes {
    // The largest message that can be communicated (16 bits)
    uint32  max_message_size             = 1;
    // The size of the buffer used for the longest strings. (16 bits) 
    // Examples include the command line and the error string.
    uint32  big_data_buffer_size         = 2;
    // The number of parameter buffers kept by the device.
    // This determines the number of parameters that can be
    // handled in a single message. (8 bits)
    uint32  parameter_buffer_count       = 3;

    // num_medium_structs_in_msg is replaced with more descriptive names.
    // device_info_len is replaced with more descriptive names.

    // The number of parameter values that fit in one message. (8 bits)
    uint32  num_params_in_response       = 4;
    // The length of the description fields in various structures
    // Previously known as long_string_len.   (8 bits)
    uint32  description_len              = 6;
    // The number of bytes in the largest parameter data.  (8 bits)
    uint32  max_param_bytes              = 7;
    // The number of bytes in the param info description string  (8 bits)
    uint32  param_info_description_len   = 10;
    // The length of most (medium) strings.  (8 bits)
    // Used for device name, file names, command names.
    uint32  medium_string_len            = 8;
    // The number of bytes in short strings like the units label.  (8 bits)
    // Also the names of enumerations and the version string.
    uint32  short_string_len             = 9;

    // number of descriptors (stream, file) that fit in one message.  (8 bits)
    uint32  num_descriptors_in_response  = 5;
    // Number of parameter notifications supported  (8 bits)
    uint32  num_param_notifications      = 11;
    // not currently used  (8 bits)
    uint32  num_commands_in_response     = 13;
    // number of param descriptions that can be in one info packet. (8 bits)
    uint32  count_param_desc_in_response = 14;
    // number of enums that fit in a parameter EX response
    // Since the server composes this response, it's not so critical that 
    // the client knows the max.
    uint32  param_info_enum_count        = 15;
}

enum SizesOffsets {
    MAX_MESSAGE_SIZE_OFFSET              = 0;   // uint16_t, little endian
    BIG_DATA_BUFFER_SIZE_OFFSET          = 2;   // uint16_t, little endian
    PARAMETER_BUFFER_COUNT_OFFSET        = 4;   // uint8_t
    NUM_PARAMS_IN_RESPONSE_OFFSET        = 5;   // uint8_t
    DESCRIPTION_LEN_OFFSET               = 6;   // uint8_t
    MAX_PARAM_BYTES_OFFSET               = 7;   // uint8_t
    PARAM_INFO_DESCRIPTION_LEN_OFFSET    = 8;   // uint8_t
    MEDIUM_STRING_LEN_OFFSET             = 9;   // uint8_t
    SHORT_STRING_LEN_OFFSET              = 10;  // uint8_t
    PARAM_INFO_ENUM_COUNT_OFFSET         = 11;  // uint8_t
    NUM_DESCRIPTORS_IN_RESPONSE_OFFSET   = 12;  // uint8_t
    NUM_PARAM_NOTIFICATIONS_OFFSET       = 13;  // uint8_t
    NUM_COMMANDS_IN_RESPONSE_OFFSET      = 14;  // uint8_t
    COUNT_PARAM_DESC_IN_RESPONSE_OFFSET  = 15;  // uint8_t
    STRUCTURE_SIZE                       = 16;
}

