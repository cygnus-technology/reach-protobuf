syntax = "proto3";

package AhsokaServiceFramework;

/** C# namespace for generated classes. */
option csharp_namespace = "Cygnus.Reach";

/** Java package for generated classes. */
option java_multiple_files = true;
option java_package = "com.cygnusreach.reachprotocol.proto";

//----------------------------
// Service Routing Message Header
// This object represents the Layer 2 Message Format for OpenPV Service
// Messages.
//----------------------------
message AhsokaMessageHeader {
  // This ID defines the Type of Message being carried in the Envelop / Header
  // Note: Existing OpenPV / Ahsoka Message Architecture
  int32 transport_id = 1;

  // (Optional) This ID defines a unique Message / Response used when out of
  // order messages are needed usually left empty since OpenPV Endpoints
  // gaurantee message order Note: Existing OpenPV / Ahsoka Message Architecture
  int32 client_message_id = 2;

  // (Optional) Unique ID for a Client used in Services that support Multiple
  // Clients (usually autopopulated with GUID) Note: Part of Existing OpenPV /
  // Ahsoka Message Architecture
  bytes client_id = 3;

  // (Optional) Frameing Size for Service Messages on Stream Based Transports
  // (BLE, Serial) Note: New for OpenPV / Ahsoka Message Architecture
  int32 message_size = 4;

  // (Optional) Routing for Non-Endpoint Style Transports.
  // Note: Endpoint 0 is Reserved for Service Discovery for Non-Endpoint
  // Transports Note: New for OpenPV / Ahsoka Message Architecture
  uint32 endpoint_id = 5;

  // (Optional) Indicates that the message has used deflate compression in
  // addition to pbuff encoding Note: New for OpenPV / Ahsoka Message
  // Architecture
  bool is_message_compressed = 6;

}

//----------------------------
// Empty Object / Message used when no information is needed
// other than the TransportID
//----------------------------
message EmptyNotification {}
